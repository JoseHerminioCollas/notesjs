
const a = [ 'Aa', 'aaa', 'aaaaa', 'BbBb', 'Aaaa', 'AaAaAa', 'a' ]
const b = [ 'abc', 'acb', 'bac', 'foo', 'bca', 'cab', 'cba' ]

findUniq([ 'Aa', 'aaa', 'aaaaa', 'BbBb', 'Aaaa', 'AaAaAa', 'a' ]) === 'BbBb'
findUniq([ 'abc', 'acb', 'bac', 'foo', 'bca', 'cab', 'cba' ]) === 'foo'

function findUniq (arr) {
    // find a signature alpha order, set
    const sigs = arr.map(e => { //
        const arrA = e.toLowerCase().split('')
        console.log(arrA)
        arrA.sort((a, b) => {
            if (a < b) {
                return -1
            }
            if (a > b) {
                return 1
            }
            return 0
        })
        // console.log(arrA)
        const setA = new Set(arrA)
        const arrB = Array.from(setA)
        const strA = arrB.join('')
        return strA
    })
    // iterate compare with signature
    // find the repeating element
    let isFound = false
    while(!isFound){
        console.log(' - - ')
        isFound = true
    }
    const lastI = sigs.lastIndexOf(sigs[0])
    const firstI = sigs.indexOf(sigs[0])
    console.log(lastI, firstI)
    
    const twoSignatures = new Set(sigs)
    console.log(twoSignatures)
    return sigs
}

function Note () {
    const r = findUniq(a)
    const r1 = findUniq(b)
    console.log(r)
    console.log(r1)
}
module.exports = Note
